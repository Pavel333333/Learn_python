# Часть 1
# _______________________________________________

# Задача 1
def square_perimeter(a: int) -> int:
    # a = int(input('Введите длину стороны квадрата: '))
    print(f'Периметр квадрата со стороной {a} равен {4 * a}')
    return 4 * a


# print('---------------------------------------------')
#
# # Задача 2
def square_of_square(a: int) -> int:
    # a = int(input('Введите длину стороны квадрата: '))
    print(f'Площадь квадрата со стороной {a} равна {a ** 2}')
    return a ** 2


# print('---------------------------------------------')
#
# # Задача 3
def rectangle_square_and_perimeter(a: int, b: int) -> tuple:
    # a = int(input('Введите длины сторон прямоугольника\na: '))
    # b = int(input('b: '))
    # print(f'Площадь прямоугольника со сторонами {a} и {b} равна {a * b}\nЕго же периметр равен {2 * (a + b)}')
    return a * b, 2 * (a + b)


# print('---------------------------------------------')
#
# # Задача 4
from math import pi


def circular_length(d: int) -> float:
    # d = int(input('Введите диаметр окружности: '))
    l = pi * d
    # print(f'Длина окружности с диаметром {d} равна {l}')
    return l
# print('---------------------------------------------')
#
# # Задача 5


def cube_volume_and_surface_area(a: int) -> tuple:
    # a = int(input('Введите длину стороны куба: '))
    v = a ** 3
    s = 6 * (a ** 2)
    # print(f'Объём куба со стороной {a} равен {v}\nПлощадь поверхности {s}')
    return v, s
# print('---------------------------------------------')
#
# # Задача 6


def parallelepiped_volume_and_surface_area(a: int, b: int, c: int) -> tuple:
    # a, b, c = int(input('Введите длины сторон параллелепипеда\na: ')), int(input('b: ')), int(input('c: '))
    v_1 = a * b * c
    s_1 = 2 * (a * b + b * c + a * c)
    # print(f'Объём параллелепипеда со рёбрами {a}, {b} и {c} равен {v_1}\nПлощадь поверхности {s_1}')
    return v_1, s_1

# print('---------------------------------------------')
#
# # Задача 7


def circle_length_square(r: int) -> tuple:
    # r = int(input('Введите радиус окружности: '))
    l_2 = 2 * pi * r
    s_2 = pi * (r ** 2)
    # print(f'Длина окружности с радиусом {r} равна {l_2}\nПлощадь круга с этим же радиусом равна {s_2}')
    return l_2, s_2

# print('---------------------------------------------')
#
# # Задача 8


def arithmetic_mean(a: int, b: int) -> float | int:
    # a, b = int(input('Введите число a: ')), int(input('Введите число b: '))
    a_m = (a + b) / 2
    # print(f'Среднее арифметическое чисел {a} и {b} равно {a_m}')
    return a_m

# print('---------------------------------------------')
#
# # Задача 9


def geometric_mean(a: int, b: int) -> float:
    # a, b = int(input('Введите неотрицательное число a: ')), int(input('Введите неотрицательное число b: '))
    g_m = (a * abs(b)) ** (1 / 2)
    # print(f'Среднее геометрическое чисел {a} и {b} равно {g_m}')
    return g_m

# print('---------------------------------------------')
#
# # Задача 10


def square_of_digits(a: int, b: int) -> tuple:
    # a, b = int(input('Введите числа не равные нулю\na: ')), int(input('b: '))
    # print(f'Сумма квадратов чисел {a} и {b} равна {a ** 2 + b ** 2}')
    # print(f'Разница квадратов чисел {a} и {b} равна {a ** 2 - b ** 2}')
    # print(f'Произведение квадратов чисел {a} и {b} равно {a ** 2 * b ** 2}')
    # print(f'Частное квадратов чисел {a} и {b} равно {a ** 2 / b ** 2}')
    return a ** 2 + b ** 2, a ** 2 - b ** 2, a ** 2 * b ** 2, a ** 2 / b ** 2

# print('---------------------------------------------')
#
# # Часть 2
# # _______________________________________________
#
# # Задача 1


def full_meters_in_sm(l: int) -> int:
    # l = int(input('Введите расстояние в сантиметрах\nl: '))
    # print(f'Полных метров в расстоянии {l} см равно {l // 100} м')
    return l // 100

# print('---------------------------------------------')
#
# # Задача 2


def full_ton_in_kg(m: int) -> int:
    # m = int(input('Введите массу в килограммах\nm: '))
    # print(f'Полных тонн в массе {m} кг равно {m // 1000} тонн')
    return m // 1000

# print('---------------------------------------------')
#
# # Задача 3


def full_kb_in_bytes(b: int) -> int:
    # b = int(input('Введите размер файла в байтах\nb: '))
    # print(f'Полных килобайт в {b} байтов равно {b // 1024}')
    return b // 1024

# print('---------------------------------------------')
#
# # Задача 4


def segment(a: int, b: int):
    # a, b = int(input('Введите длины отрезков\na: ')), int(input('b: '))
    print(f'В отрезке длиной {a} можно разместить максимум {a // b} отрезков длиной {b}')

# print('---------------------------------------------')
#
# # Задача 5


def segment_tail(a: int, b: int):
    # a, b = int(input('Введите длины отрезков\na: ')), int(input('b: '))
    print(f'Если на отрезке {a} разместить максимум отрезков длиной {b} ({a // b} отрезков), '
          f'то останется незанятым "хвостик" {a % b}')

# print('---------------------------------------------')
#
# # Задача 6


def double_digit_number(a):
    # a = int(input('Введите двузначное число\na: '))
    print(f'Число десятков числа {a} равно {a // 10}, правая цифра равна {a % 10}')
    # print('---------------------------------------------')
    #
    # # Задача 7
    # a = int(input('Введите двузначное число\na: '))
    print(f'Сумма цифр числа {a} равна {(a // 10) + (a % 10)}, а произведение {(a // 10) * (a % 10)}')
    # print('---------------------------------------------')
    #
    # # Задача 8
    # a = int(input('Введите двузначное число\na: '))
    print(f'Если переставить местами цифры числа {a}, то получится {(a % 10) * 10 + a // 10}')

# print('---------------------------------------------')
#


def triple_digit_number(a):
    # # Задача 9
    # a = int(input('Введите трёхзначное число\na: '))
    print(f'Число сотен числа {a} равно {a // 100}')
    # print('---------------------------------------------')
    #
    # # Задача 10
    # a = int(input('Введите трёхзначное число\na: '))
    print(f'Правая цифра числа {a} равна {(a % 100) % 10}, число десятков равно {(a // 10) % 10}')

# print('---------------------------------------------')
#
#
#
# # Часть 3
# # _______________________________________________
#


def one_number(a: int):
    # # Задача 1
    # a = int(input('Введите число a: '))
    print(f'Утверждение "Число {a} является положительным" является {a > 0}')
    # print('---------------------------------------------')
    #
    # # Задача 2
    # a = int(input('Введите число a: '))
    print(f'Утверждение "Число {a} является нечетным" является {a % 2 != 0}')
    # print('---------------------------------------------')
    #
    # # Задача 3
    # a = int(input('Введите число a: '))
    print(f'Утверждение "Число {a} является четным" является {a % 2 == 0}')

# print('---------------------------------------------')
#


def two_numbers(a: int, b: int):
    # # Задача 4
    # a, b = int(input('Введите числа\na: ')), int(input('b: '))
    print(f'Утверждение "справедливы неравенства {a} > 2 и {b} ≤ 3" является {a > 2 and b <= 3}')
    # print('---------------------------------------------')
    #
    # # Задача 5
    # a, b = int(input('Введите числа\na: ')), int(input('b: '))
    print(f'Утверждение "справедливы неравенства {a} ≥ 0 и {b} < -2" является {a >= 0 and b < -2}')

# print('---------------------------------------------')
#


def three_numbers(a: int, b: int, c: int):
    # # Задача 6
    # a, b, c = int(input('Введите числа\na: ')), int(input('b: ')), int(input('c: '))
    print(f'Утверждение "справедливо двойное неравенство {a} < {b} < {c}" является {a < b < c}')
    # print('---------------------------------------------')
    #
    # # Задача 7
    # a, b, c = int(input('Введите числа\na: ')), int(input('b: ')), int(input('c: '))
    print(f'Утверждение "Число {b} находится между числами {a} и {c}" является {a < b < c}')

# print('---------------------------------------------')
#


def two_numbers_comparison(a: int, b: int):
    # # Задача 8
    # a, b = int(input('Введите числа\na: ')), int(input('b: '))
    print(f'Утверждение "каждое из чисел {a} и {b} нечётное" является {a % 2 != 0 and b % 2 != 0}')
    # print('---------------------------------------------')
    #
    # # Задача 9
    # a, b = int(input('Введите числа\na: ')), int(input('b: '))
    print(f'Утверждение "хотя бы одно из чисел {a} и {b} нечётное" является {a % 2 != 0 or b % 2 != 0}')
    # print('---------------------------------------------')
    #
    # # Задача 10
    # a, b = int(input('Введите числа\na: ')), int(input('b: '))
    count = 0

    if a % 2 != 0:
        count += 1
    if b % 2 != 0:
        count += 1

    print(f'Утверждение "ровно одно из чисел {a} и {b} нечётное" является {count == 1}')


# print('---------------------------------------------')
#
#
#
# # Часть 4
# # _______________________________________________
#


def list1():
    # # Задача 1
    # input('Нажмите Enter, чтобы продолжить')
    lst = [1, 2, 3, 4, 5]
    print(f'первый элемент списка {lst[0]}\nтретий элемент списка {lst[2]}\nпервые три элемента списка {lst[:3]}')

# print('---------------------------------------------')
#


def rostov():
    # # Задача 2
    # input('Нажмите Enter, чтобы продолжить')
    lst = ['Ростов', '+', 'на', '-', 'Дону']
    lst[1] = '-'
    print(lst[0], lst[1], lst[2], lst[3], lst[4], sep='')

# print('---------------------------------------------')
#


def word_digit():
    # # Задача 3
    # input('Нажмите Enter, чтобы продолжить')
    lst = ['a', 's', '1', 'a', '32', '23']
    lst_words = []
    lst_numbers = []

    for i in lst:
        if i.isalpha():
            lst_words.append(i)
        else:
            lst_numbers.append(i)
    print(lst_words, lst_numbers, sep='\n')

    # print('---------------------------------------------')
    #
    # # Задача 4
    # input('Нажмите Enter, чтобы продолжить')
    lst_words.pop()
    lst_words.reverse()
    print(lst_words)
    # print('---------------------------------------------')
    #
    # # Задача 5
    # input('Нажмите Enter, чтобы продолжить')
    lst = ['a', 's', '1', 'a', '32', '23']
    g = set(lst)
    print(g)
    # print('---------------------------------------------')
    # # возможно изменился порядок элементов


# Часть 5
# _______________________________________________


def man_print():
    # Задача 1
    # input('Нажмите Enter, чтобы продолжить')
    man = {'имя': 'Иван', 'возраст': 21, 'пол': 'мужской', 'рост': 180, 'вес': 80, 'размер ноги': 44}
    # print('---------------------------------------------')
    #
    # # Задача 2
    # input('Нажмите Enter, чтобы продолжить')
    print(', '.join(f'{key}: {value}' for key,value in man.items()))
    # print('---------------------------------------------')
    #
    # # Задача 3
    # input('Нажмите Enter, чтобы продолжить')
    man['размер ноги'] = 45
    # print('---------------------------------------------')
    #
    # # Задача 4
    # input('Нажмите Enter, чтобы продолжить')
    del man['возраст']
    print(', '.join(f'{key}: {value}' for key,value in man.items()))


print(man_print())

# print('---------------------------------------------')
#
#
# # Часть 6
# # _______________________________________________


def byn_search():
    #
    # # Задача 1
    a = int(input('Введите число a, которое будем искать в последовательности чисел от 1 до 55: '))
    lst = [i for i in range(56)]
    count_attempts = 0  # количество попыток
    search_result = False
    low = 0  # первый элемент списка
    high = len(lst) - 1  # последний элемент списка
    middle = (high + low) // 2  # средний элемент списка

    while low <= high:
        count_attempts += 1
        middle = (high + low) // 2
        if a == lst[middle]:
            search_result = True
            break
        elif a > lst[middle]:
            low = middle + 1
        elif a < lst[middle]:
            high = middle - 1

    print(f'Количество попыток поиска было {count_attempts}')

    if search_result:
        print('Поиск увенчался успехом')
    else:
        print(f'Числа {a} нет в списке от 0 до {lst[-1]}')

# print('---------------------------------------------')
#


def bubble_sort(lst):
    # # Задача 2
    # lst = [32, 8, 24, 47, 43, 21, 34, 95, -1, 39, 41]

    for i in range(len(lst)-1):
        for j in range(len(lst)-1-i):
            if lst[j] > lst[j + 1]:
                lst[j], lst[j + 1] = lst[j + 1], lst[j]

    return lst
